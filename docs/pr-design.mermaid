%%{init: {'theme': 'base', 'themeVariables': { 'canvasBg': '#f0f0f0' }}}%%
flowchart LR
    %% Main flow colors
    classDef startEnd fill:#1a73e8,stroke:#0d47a1,color:white,stroke-width:2px
    classDef question fill:#ffab40,stroke:#f57c00,color:black,stroke-width:2px
    classDef process fill:#f5f5f5,stroke:#616161,color:black,stroke-width:1px
    classDef hidden fill:none,stroke:none,color:none
    
    %% Team colors
    classDef serviceOwning fill:#4caf50,stroke:#2e7d32,color:white,stroke-width:1px
    classDef sisterTeam fill:#7986cb,stroke:#3949ab,color:white,stroke-width:1px
    
    %% Grade colors
    classDef gradeC fill:#fff9c4,stroke:#f9a825,color:black,stroke-width:1px
    classDef gradeD fill:#ffe0b2,stroke:#e65100,color:black,stroke-width:1px
    classDef gradeE fill:#c8e6c9,stroke:#2e7d32,color:black,stroke-width:1px
    classDef gradeF fill:#bbdefb,stroke:#0d47a1,color:black,stroke-width:1px
    
    %% Approval colors
    classDef approval fill:#e8f5e9,stroke:#2e7d32,color:black,stroke-width:1px
    classDef reviewChecklist fill:#e3f2fd,stroke:#0d47a1,color:black,stroke-width:1px
    classDef feedback fill:#f3e5f5,stroke:#6a1b9a,color:black,stroke-width:1px
    classDef finalApproval fill:#1b5e20,stroke:#004d40,color:white,stroke-width:1px
    classDef noApproval fill:#e0e0e0,stroke:#424242,color:black,stroke-width:1px
    
    %% Environment colors
    classDef sandbox fill:#DCEDC8,stroke:#558b2f,color:black,stroke-width:1px
    classDef staging fill:#FFE0B2,stroke:#e65100,color:black,stroke-width:1px
    classDef production fill:#FFCDD2,stroke:#b71c1c,color:black,stroke-width:1px
    classDef itsm fill:#E1BEE7,stroke:#6a1b9a,color:black,stroke-width:1px
    
    subgraph Reference["Reference Information"]
        direction TB
        
        subgraph Principles["Key Principles"]
            direction TB
            p1["Service Ownership: Service Owning team must approve all changes"]
            p2["4-eyes Principle: Independent review required for all changes"]
            p3["Cross-team: Requires approval from both teams following grade patterns"]
            p4["Solution Proving: Initial validation in sandbox before code review"]
            p5["Change Management: Production changes require ITSM approval"]
        end
        
        subgraph ColorKey["Color Key"]
            direction TB
            k1["Start/End Points"]
            k2["Decision Points"]
            k3["Service Owning Team"]
            k4["Sister Team"]
            k5["Grade C"]
            k6["Grade D"]
            k7["Grade E"]
            k8["Grade F"]
            k9["Approval Steps"]
            k10["Review Checklist"]
            k11["Feedback Process"]
            k12["Final Approval"]
            k14["Sandbox Environment"]
            k15["Staging Environment"]
            k16["Production Environment"]
            k17["ITSM Process"]
        end
        
        %% Force side-by-side layout
        Principles -.- ColorKey
    end
    
    spacer1[" "]:::hidden
    Reference -.- spacer1:::hidden
    
    subgraph Process["Approval and Deployment Process"]
        direction TB
        %% Sandbox Development (No PR)
        DevStart([Development Start]) --> SandboxDev["Direct Development in Sandbox"]:::sandbox
        SandboxDev --> SolutionProving["Solution Proving in Sandbox"]:::sandbox
        SolutionProving --> SandboxValidation{Solution\nValidated?}
        
        SandboxValidation -->|No| FixSolution["Fix Solution in Sandbox"]:::sandbox
        SandboxValidation -->|Yes| PR([Create PR for Staging])
        
        FixSolution --> SolutionProving
        
        %% PR Approval Process for Staging
        PR --> OwnerCheck{Is PR Author\nfrom Service Owning Team?}
        
        OwnerCheck -->|Yes| InternalPath["Feature Team Change"]
        OwnerCheck -->|No| ExternalPath["Sister Team Contribution"]
        
        InternalPath --> InternalGradeCheck{Author's\nGrade?}
        ExternalPath --> ExternalGradeCheck{Author's\nGrade?}
        
        %% Feature team approval path
        InternalGradeCheck -->|Grade C| IC["Feature Team Grade C"]
        InternalGradeCheck -->|Grade D| ID["Feature Team Grade D"]
        InternalGradeCheck -->|Grade E| IE["Feature Team Grade E"]
        InternalGradeCheck -->|Grade F| IF["Feature Team Grade F"]
        
        IC --> ICApproval["Required: Grade D or above\nfrom Service Owning Team"]
        ID --> IDApproval["Required: Grade D or above\nfrom Service Owning Team"]
        IE --> IEApproval["Required: Grade E or above\nfrom Service Owning Team"]
        IF --> IFApproval["Required: Grade E or F\nfrom Service Owning Team"]
        
        %% Sister team approval path
        ExternalGradeCheck -->|Grade C| EC["External Grade C"]
        ExternalGradeCheck -->|Grade D| ED["External Grade D"]
        ExternalGradeCheck -->|Grade E| EE["External Grade E"]
        ExternalGradeCheck -->|Grade F| EF["External Grade F"]
        
        %% Sister team internal 4-eyes check
        EC --> ECApproval["Required: Grade D or above\nfrom Sister Team (4-eyes)"]
        ED --> EDApproval["Required: Grade D or above\nfrom Sister Team (4-eyes)"]
        EE --> EEApproval["Required: Grade E or above\nfrom Sister Team (4-eyes)"]
        EF --> EFApproval["Required: Grade E or F\nfrom Sister Team (4-eyes)"]
        
        %% Service owning team approval (same grade pattern)
        ECApproval --> OCApproval["Required: Grade D or above\nfrom Service Owning Team"]
        EDApproval --> ODApproval["Required: Grade D or above\nfrom Service Owning Team"]
        EEApproval --> OEApproval["Required: Grade E or above\nfrom Service Owning Team"]
        EFApproval --> OFApproval["Required: Grade E or F\nfrom Service Owning Team"]
        
        %% Connect all approval paths to review checklist
        ICApproval --> ReviewChecklist
        IDApproval --> ReviewChecklist
        IEApproval --> ReviewChecklist
        IFApproval --> ReviewChecklist
        
        OCApproval --> ReviewChecklist
        ODApproval --> ReviewChecklist
        OEApproval --> ReviewChecklist
        OFApproval --> ReviewChecklist
        
        ReviewChecklist["Reviewer Checklist:<br>- Code quality standards<br>- Security considerations<br>- Test coverage<br>- Documentation<br>- Infrastructure plan verified"] --> FeedbackLoop{Feedback<br>Provided?}
        
        FeedbackLoop -->|Yes| AddressFeedback["Author addresses\nfeedback"]:::feedback
        FeedbackLoop -->|No| FinalCodeApproval["Final Code Approval"]
        
        %% NEW STEP: Update PR after addressing feedback
        AddressFeedback --> UpdatePR["Update PR with changes"]:::feedback
        UpdatePR --> ReviewChecklist
        
        %% Final staging deployment
        FinalCodeApproval --> MergePRStaging["Merge PR to Staging"]
        MergePRStaging --> DeployStaging["Deploy to Staging Environment"]:::staging
        
        DeployStaging --> StagingTest["Validation Tests in Staging"]:::staging
        StagingTest --> StagingOK{Staging\nValidation\nOK?}
        StagingOK -->|No| FixStaging["Fix Issues"]:::staging
        StagingOK -->|Yes| CreateGitHubRelease["Create GitHub Release\nwith Semantic Versioning"]
CreateGitHubRelease --> CreatePRProd["Create PR for Production"]
        
        CreatePRProd --> RaiseITSM["Raise Change Request in ITSM Tool"]:::itsm
        
        FixStaging --> PR
        
        %% Production Path via ITSM
        RaiseITSM --> ITSMDetails["Include:\n- Change Intent (TF Plan)\n- Staging Test Results\n- Risk Assessment"]:::itsm
        ITSMDetails --> ChangeApproval{Change\nApproval\nProcess}
        
        ChangeApproval -->|Rejected| ReviseChange["Revise Change"]:::itsm
        ChangeApproval -->|Approved| MergePRProd["Merge PR to Production"]
        
        MergePRProd --> ProdEnv["Deploy to Production Environment"]:::production
        
        ReviseChange --> PR
        
        ProdEnv --> ProdValidation["Production Validation"]:::production
        ProdValidation --> ProdOK{Production\nValidation\nOK?}
        
        ProdOK -->|No| Rollback["Rollback to Last Known Good\nProduction Release Version"]:::production
        ProdOK -->|Yes| UpdateRelease["Update GitHub Release\nto 'Deployed to Production'"]:::production
UpdateRelease --> Complete["Change Complete"]:::production
        
        Rollback --> LearnFromFailure["Document Learnings"]:::itsm
        LearnFromFailure --> ReviseChange
        
        Complete --> Completion([Process Complete])
    end
    
    %% Apply classes
    class DevStart,PR,Completion startEnd
    class OwnerCheck,InternalGradeCheck,ExternalGradeCheck,FeedbackLoop,SandboxValidation,StagingOK,ChangeApproval,ProdOK question
    class InternalPath,IC,ID,IE,IF serviceOwning
    class ExternalPath,EC,ED,EE,EF sisterTeam
    class MergePRStaging,CreateGitHubRelease,CreatePRProd,MergePRProd process
    
    %% Grade-specific node colors
    class IC,EC gradeC
    class ID,ED gradeD
    class IE,EE gradeE
    class IF,EF gradeF
    
    %% Process node colors
    class ECApproval,EDApproval,EEApproval,EFApproval approval
    class ICApproval,IDApproval,IEApproval,IFApproval approval
    class OCApproval,ODApproval,OEApproval,OFApproval approval
    class ReviewChecklist reviewChecklist
    class AddressFeedback,UpdatePR feedback
    class FinalCodeApproval finalApproval
    
    %% Environment node colors
    class SandboxDev,SolutionProving,FixSolution sandbox
    class DeployStaging,StagingTest,FixStaging staging
    class ProdEnv,ProdValidation,Rollback,Complete,UpdateRelease production
    class RaiseITSM,ITSMDetails,ReviseChange,LearnFromFailure itsm
    
    %% Apply classes to color key
    class k1 startEnd
    class k2 question
    class k3 serviceOwning
    class k4 sisterTeam
    class k5 gradeC
    class k6 gradeD
    class k7 gradeE
    class k8 gradeF
    class k9 approval
    class k10 reviewChecklist
    class k11 feedback
    class k12 finalApproval
    class k14 sandbox
    class k15 staging
    class k16 production
    class k17 itsm
    class p1,p2,p3,p4,p5 process
