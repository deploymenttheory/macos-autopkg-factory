name: '🖥️ AutoPkg Jamf Pro App Deployment'

on:
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM
  workflow_dispatch:     # Allow manual triggering
    inputs:
      verify_trust:
        description: 'Verify trust info for recipes'
        required: true
        default: true
        type: boolean
      update_trust:
        description: 'Update trust info if verification fails'
        required: false
        default: true
        type: boolean
      log_level:
        description: 'Log level (DEBUG, INFO, WARNING, ERROR, SUCCESS)'
        required: false
        default: 'DEBUG'
        type: string
      recipe:
        description: 'Optionally set a specific autopkg recipe to run. override is a pre-req'
        required: false
        default: ''
        type: string
      recipes:
        description: 'Optionally set a comma delimited list of recipes. override is a pre-req'
        required: false
        default: ''
        type: string
      recipe_list_file:
        description: 'Optionally set a repo path to a recipe list file (.json or .plist). Defaults to path $GITHUB_WORKSPACE/configuration/recipe_list.txt if blank.'
        required: false
        default: ''
        type: string

env:
  # AutoPkg preferences path
  AUTOPKG_PREFS_PATH: ~/Library/Preferences/com.github.autopkg.plist
  # GitHub authentication
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # Jamf Pro settings
  JSS_URL: ${{ secrets.JAMFPRO_URL }}
  CLIENT_ID: ${{ secrets.JAMFPRO_CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.JAMFPRO_CLIENT_SECRET }}
  # Notification services
  TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  SLACK_USERNAME: "AutoPkg Bot"
  # Logging
  LOG_LEVEL: ${{ github.event.inputs.log_level || 'INFO' }}
  # Recipe override directory
  RECIPE_OVERRIDE_DIRS: ${{ github.workspace }}/recipe_overrides
  # Recipe input (environment variable approach)
  # Using RUN_RECIPE instead of RECIPE to match the parser's expected env var name
  RUN_RECIPE: ${{ github.event.inputs.recipe }}
  # Recipe list file path
  RECIPE_LIST_FILE: ${{ github.event.inputs.recipe_list_file || '$GITHUB_WORKSPACE/configuration/recipe_list.txt' }}

jobs:
  autopkg-run:
    name: 📦 autopkg-run-recipes
    runs-on: macos-latest
    steps:
      - name: Validate Inputs
        run: |
          echo "🔍 Validating input values..."

          # Validate log_level against allowed values
          VALID_LOG_LEVELS=("DEBUG" "INFO" "WARNING" "ERROR" "SUCCESS")
          LOG_LEVEL="${{ github.event.inputs.log_level }}"
          if [[ ! " ${VALID_LOG_LEVELS[@]} " =~ " $LOG_LEVEL " ]]; then
            echo "❌ ERROR: Invalid log level: $LOG_LEVEL"
            echo "📝 Allowed values: DEBUG, INFO, WARNING, ERROR, SUCCESS"
            exit 1
          fi

          echo "✅ Validation passed!"

      - name: Checkout Repository
        uses: actions/checkout@v4.2.0
      
      - name: Setup Go
        uses: actions/setup-go@v5.3.0
        with:
          go-version: '1.24'

      - name: Build AutoPkg CLI GHA runner Tool
        run: |
          # Build the CLI tool that will execute the workflow
          cd cmd/autopkgctl
          go build -o $GITHUB_WORKSPACE/autopkgctl
          chmod +x $GITHUB_WORKSPACE/autopkgctl
          echo "$GITHUB_WORKSPACE" >> $GITHUB_PATH
      
      - name: Setup AutoPkg Environment
        id: setup
        run: |
          # Initialize AutoPkg environment
          autopkgctl setup \
            --prefs="$AUTOPKG_PREFS_PATH" \
            --force-update=false \
            --use-beta=false \
            --check-git \
            --check-root
      
      - name: Configure AutoPkg
        run: |
          # Configure AutoPkg with credentials and settings
          autopkgctl configure \
            --prefs="$AUTOPKG_PREFS_PATH" \
            --jss-url="${{ env.JSS_URL }}" \
            --client-id="${{ env.CLIENT_ID }}" \
            --client-secret="${{ env.CLIENT_SECRET }}" \
            --teams-webhook="${{ env.TEAMS_WEBHOOK }}" \
            --github-token="${{ env.GITHUB_TOKEN }}" \
            --override-dir="${{ env.RECIPE_OVERRIDE_DIRS }}" \
            --fail-recipes-without-trust-info=true
      
      - name: Add Recipe Repos
        if: ${{ github.event.inputs.verify_trust != 'false' }}
        run: |
          for repo in $(cat ./configuration/repo_list.txt); do autopkg repo-add "$repo" && autopkg repo-update "$repo"; done
      
      - name: Resolve Recipe Repo Dependencies
        run: |
          # Run recipe-repo-deps to resolve dependencies
          autopkgctl recipe-repo-deps \
            --prefs="$AUTOPKG_PREFS_PATH" \
            --use-token \
            --recipes "${{ github.event.inputs.recipes }}" \
            --repo-list-path="./configuration/repo_list.txt"
      
      # Environment Variable Approach
      - name: Run AutoPkg Recipe via Environment Variable
        if: ${{ github.event.inputs.recipe != '' }}
        run: |
          echo "Running recipe from environment variable: $RUN_RECIPE"
          
          # We don't need to pass the --recipes flag when using RUN_RECIPE env var
          # Our parser will automatically detect the RUN_RECIPE environment variable
          autopkgctl run \
            --prefs="$AUTOPKG_PREFS_PATH" \
            --report="$GITHUB_WORKSPACE/autopkg-run-report-env.json" \
            --notify-teams="${{ env.TEAMS_WEBHOOK }}" \
            --override-dir="${{ env.RECIPE_OVERRIDE_DIRS }}" \
            --stop-on-error=true \
            --verbose=3 \
            --verify-trust=true \
            --update-trust=false \
            --ignore-verify-failures=false
      
      # Recipes Approach
      - name: Run AutoPkg Recipes
        if: ${{ github.event.inputs.recipes != '' }}
        run: |
          echo "Running recipes:"
          
          autopkgctl run \
            --prefs="$AUTOPKG_PREFS_PATH" \
            --report="$GITHUB_WORKSPACE/autopkg-run-report-env.json" \
            --notify-teams="${{ env.TEAMS_WEBHOOK }}" \
            --override-dir="${{ env.RECIPE_OVERRIDE_DIRS }}" \
            --stop-on-error=true \
            --verbose=3 \
            --verify-trust=true \
            --update-trust=false \
            --ignore-verify-failures=false \
            --recipes="${{ github.event.inputs.recipes }}"

      # Recipe List File Approach
      - name: Run AutoPkg Recipes via Recipe List File
        if: ${{ github.event.inputs.recipe_list_file != '' }}
        run: |
          echo "Running recipes from list file: ${{ env.RECIPE_LIST_FILE }}"
          
          # Make sure the file exists and is readable
          ls -la "${{ env.RECIPE_LIST_FILE }}"
          
          # Run recipes using the recipe list file
          autopkgctl run \
            --prefs="$AUTOPKG_PREFS_PATH" \
            --report="$GITHUB_WORKSPACE/autopkg-run-report-list.json" \
            --notify-teams="${{ env.TEAMS_WEBHOOK }}" \
            --override-dir="${{ env.RECIPE_OVERRIDE_DIRS }}" \
            --stop-on-error=true \
            --verbose=3 \
            --verify-trust=true \
            --update-trust=false \
            --ignore-verify-failures=false \
            --recipe-list="${{ env.RECIPE_LIST_FILE }}"

      - name: Cleanup Cache
        if: always()
        run: |
          # Clean up cache
          autopkgctl cleanup \
            --prefs="$AUTOPKG_PREFS_PATH" \
            --remove-downloads \
            --remove-recipe-cache
      
      - name: Upload Run Report
        if: always()
        uses: actions/upload-artifact@v4.6.1
        with:
          name: autopkg-run-report
          path: |
            ${{ github.workspace }}/autopkg-run-report-env.json
            ${{ github.workspace }}/autopkg-run-report-list.json