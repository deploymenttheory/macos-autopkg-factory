%%{init: {
  'theme': 'base', 
  'themeVariables': { 
    'primaryColor': '#0277bd',
    'primaryTextColor': '#ffffff',
    'primaryBorderColor': '#01579b',
    'lineColor': '#37474f',
    'secondaryColor': '#0097a7',
    'tertiaryColor': '#f3f9fd',
    'canvasBg': '#f8fcff'
  },
  'flowchart': {
    'curve': 'basis',
    'diagramPadding': 20
  }
}}%%

flowchart TB
    %% Main flow colors - Professional Blue Theme
    classDef startEnd fill:#0277bd,stroke:#01579b,color:white,stroke-width:2px
    classDef question fill:#0097a7,stroke:#00838f,color:white,stroke-width:2px
    classDef process fill:#ffffff,stroke:#90a4ae,color:#37474f,stroke-width:1px
    classDef hidden fill:none,stroke:none,color:none
    classDef jiraTicket fill:#0065ff,stroke:#0052cc,color:white,stroke-width:1px
    classDef jiraStatus fill:#deebff,stroke:#0052cc,color:#0052cc,stroke-width:1px
    classDef branchNaming fill:#e1f5fe,stroke:#039be5,color:#01579b,stroke-width:1px
    
    %% Team colors
    classDef serviceOwning fill:#00897b,stroke:#00695c,color:white,stroke-width:1px
    classDef sisterTeam fill:#5c6bc0,stroke:#3949ab,color:white,stroke-width:1px
    
    %% Grade colors
    classDef gradeC fill:#fff9c4,stroke:#fbc02d,color:#424242,stroke-width:1px
    classDef gradeD fill:#ffe0b2,stroke:#fb8c00,color:#424242,stroke-width:1px
    classDef gradeE fill:#c8e6c9,stroke:#43a047,color:#424242,stroke-width:1px
    classDef gradeF fill:#bbdefb,stroke:#1976d2,color:#424242,stroke-width:1px
    
    %% Approval colors
    classDef approval fill:#e8f5e9,stroke:#43a047,color:#2e7d32,stroke-width:1px
    classDef reviewChecklist fill:#e3f2fd,stroke:#1976d2,color:#0d47a1,stroke-width:1px
    classDef feedback fill:#f3e5f5,stroke:#8e24aa,color:#4a148c,stroke-width:1px
    classDef finalApproval fill:#00695c,stroke:#004d40,color:white,stroke-width:1px
    
    %% Environment colors
    classDef sandbox fill:#e8f5e9,stroke:#66bb6a,color:#2e7d32,stroke-width:1px
    classDef staging fill:#fff8e1,stroke:#ffa000,color:#e65100,stroke-width:1px
    classDef production fill:#e3f2fd,stroke:#1976d2,color:#0d47a1,stroke-width:1px
    classDef itsm fill:#f3e5f5,stroke:#9c27b0,color:#6a1b9a,stroke-width:1px
    
    subgraph Principles["Key Principles"]
        direction TB
        p1["Service Ownership: Service Owning team must approve all changes"]:::process
        p2["4-eyes Principle: Independent review required for all changes"]:::process
        p3["Cross-team: Requires approval from both teams following grade patterns"]:::process
        p4["Solution Proving: Initial validation in sandbox before code review"]:::process
        p5["Change Management: Production changes require ITSM approval"]:::process
        p6["Jira Integration: All changes tracked in Jira throughout lifecycle"]:::process
    end
    
    Principles ~~~ BranchNaming
    
    subgraph BranchNaming["Branch Naming & Jira Ticket Conventions"]
        direction TB
        subgraph feat["Features"]
            b1["Branch: feat/descriptive_name/JIRA-123"]:::branchNaming
            j1["Jira: [FEAT] JIRA-123: Descriptive title of feature"]:::jiraStatus
        end
        
        subgraph fix["Bug Fixes"]
            b2["Branch: fix/descriptive_name/JIRA-123"]:::branchNaming
            j2["Jira: [FIX] JIRA-123: Descriptive title of fix"]:::jiraStatus
        end
        
        subgraph docs["Documentation"]
            b3["Branch: docs/descriptive_name/JIRA-123"]:::branchNaming
            j3["Jira: [DOCS] JIRA-123: Descriptive title of documentation"]:::jiraStatus
        end
        
        subgraph refactor["Refactoring"]
            b4["Branch: refactor/descriptive_name/JIRA-123"]:::branchNaming
            j4["Jira: [REFACTOR] JIRA-123: Descriptive title of refactoring"]:::jiraStatus
        end
        
        subgraph test["Testing"]
            b5["Branch: test/descriptive_name/JIRA-123"]:::branchNaming
            j5["Jira: [TEST] JIRA-123: Descriptive title of test addition"]:::jiraStatus
        end
        
        subgraph chore["Build/Tooling"]
            b6["Branch: chore/descriptive_name/JIRA-123"]:::branchNaming
            j6["Jira: [CHORE] JIRA-123: Descriptive title of chore"]:::jiraStatus
        end
        
        %% Layout direction
        feat --- fix --- docs
        refactor --- test --- chore
    end
    
    BranchNaming ~~~ ColorKey
    
    subgraph ColorKey["Color Key"]
        k1([Start/End Points]):::startEnd --- k2{Decision Points}:::question --- k3["Service Owning Team"]:::serviceOwning --- k4["Sister Team"]:::sisterTeam
        k5["Grade C"]:::gradeC --- k6["Grade D"]:::gradeD --- k7["Grade E"]:::gradeE --- k8["Grade F"]:::gradeF
        k9(Approval Steps):::approval --- k10[[Review Checklist]]:::reviewChecklist --- k11>Feedback Process]:::feedback --- k12([Final Approval]):::finalApproval
        k13[/"Jira Ticket Creation"/]:::jiraTicket --- k13a["Jira Status Updates"]:::jiraStatus --- k14["Sandbox Environment"]:::sandbox --- k15["Staging Environment"]:::staging
        k16["Production Environment"]:::production --- k17{{ITSM Process}}:::itsm
    end
    
    ColorKey ~~~ Process
    
    subgraph Process["Approval and Deployment Process"]
        direction TB
        %% Jira Integration - Start
        JiraCreate[/"Create Jira Ticket
        With Conventional Format
        [TYPE] JIRA-123: Title"/]:::jiraTicket
        
        JiraCreate --> JiraRefine["Refinement:
        Requirements,
        Acceptance Criteria"]:::jiraStatus
        
        JiraRefine --> JiraInProgress["Status: In Progress"]:::jiraStatus
        
        JiraInProgress --> DevStart([Development Start])
        
        %% Sandbox Development (No PR)
        DevStart --> SandboxDev["Direct Development in Sandbox"]:::sandbox
        SandboxDev --> SolutionProving["Solution Proving in Sandbox"]:::sandbox
        SolutionProving --> SandboxValidation{Solution<br>Validated?}
        
        SandboxValidation -->|No| FixSolution["Fix Solution in Sandbox"]:::sandbox
        SandboxValidation -->|Yes| JiraBranch["Branch Format: 
        type/descriptive_name/JIRA-123"]:::jiraStatus
        
        FixSolution --> SolutionProving
        
        JiraBranch --> PR([Create PR for Staging])
        
        %% PR Approval Process for Staging
        PR --> JiraLinkPR["Link PR to Jira Ticket"]:::jiraStatus
        JiraLinkPR --> JiraReview["Status: In Review"]:::jiraStatus
        
        JiraReview --> OwnerCheck{Is PR Author<br>from Service Owning Team?}
        
        OwnerCheck -->|Yes| InternalPath["Feature Team Change"]:::serviceOwning
        OwnerCheck -->|No| ExternalPath["Sister Team Contribution"]:::sisterTeam
        
        InternalPath --> InternalGradeCheck{Author's<br>Grade?}
        ExternalPath --> ExternalGradeCheck{Author's<br>Grade?}
        
        %% Feature team approval path
        InternalGradeCheck -->|Grade C| IC["Feature Team Engineer:<br>Grade C"]:::gradeC
        InternalGradeCheck -->|Grade D| ID["Feature Team Engineer:<br>Grade D"]:::gradeD
        InternalGradeCheck -->|Grade E| IE["Feature Team Engineer:<br>Grade E"]:::gradeE
        InternalGradeCheck -->|Grade F| IF["Feature Team Engineer:<br>Grade F"]:::gradeF
        
        IC --> ICApproval(Required: Grade D or above<br>approval from Service Owning Team):::approval
        ID --> IDApproval(Required: Grade D or above<br>approval from Service Owning Team):::approval
        IE --> IEApproval(Required: Grade E or above<br>approval from Service Owning Team):::approval
        IF --> IFApproval(Required: Grade E or F<br>approval from Service Owning Team):::approval
        
        %% Sister team approval path
        ExternalGradeCheck -->|Grade C| EC["Collaborating Engineer:<br> Grade C"]:::gradeC
        ExternalGradeCheck -->|Grade D| ED["Collaborating Engineer:<br> Grade D"]:::gradeD
        ExternalGradeCheck -->|Grade E| EE["Collaborating Engineer:<br> Grade E"]:::gradeE
        ExternalGradeCheck -->|Grade F| EF["Collaborating Engineer:<br> Grade F"]:::gradeF
        
        %% Sister team internal 4-eyes check
        EC --> ECApproval(Required: Grade D or above<br>from Sister Team for 4-eyes check):::approval
        ED --> EDApproval(Required: Grade D or above<br>from Sister Team for 4-eyes check):::approval
        EE --> EEApproval(Required: Grade E or above<br>from Sister Team for 4-eyes check):::approval
        EF --> EFApproval(Required: Grade E or F<br>from Sister Team for 4-eyes check):::approval
        
        %% Service owning team approval (same grade pattern)
        ECApproval --> OCApproval(Required: Grade D or above<br> approval from Service Owning Team):::approval
        EDApproval --> ODApproval(Required: Grade D or above<br>approval from Service Owning Team):::approval
        EEApproval --> OEApproval(Required: Grade E or above<br>approval from Service Owning Team):::approval
        EFApproval --> OFApproval(Required: Grade E or F<br>approval from Service Owning Team):::approval
        
        %% Connect all approval paths to review checklist
        ICApproval --> ReviewChecklist
        IDApproval --> ReviewChecklist
        IEApproval --> ReviewChecklist
        IFApproval --> ReviewChecklist
        
        OCApproval --> ReviewChecklist
        ODApproval --> ReviewChecklist
        OEApproval --> ReviewChecklist
        OFApproval --> ReviewChecklist
        
        ReviewChecklist[[Reviewer Checklist:<br>- Code quality standards<br>- Security considerations<br>- Test coverage<br>- Documentation<br>- Infrastructure plan verified]]:::reviewChecklist
        
        ReviewChecklist --> JiraReviewComment["Add Review Comments 
        to Jira (GitHub Integration)"]:::jiraStatus
        
        JiraReviewComment --> FeedbackLoop{Feedback<br>Provided?}
        
        FeedbackLoop -->|Yes| JiraFeedback["Status: 
        Changes Requested"]:::jiraStatus
        
        JiraFeedback --> AddressFeedback>Author addresses<br>feedback]:::feedback
        FeedbackLoop -->|No| JiraApproved["Status: 
        Approved for Staging"]:::jiraStatus
        
        %% NEW STEP: Update PR after addressing feedback
        AddressFeedback --> UpdatePR>Update PR with changes]:::feedback
        UpdatePR --> JiraUpdated["Status: 
        Review Updated"]:::jiraStatus
        
        JiraUpdated --> ReviewChecklist
        
        %% Final staging deployment
        JiraApproved --> FinalCodeApproval([Final Code Approval]):::finalApproval
        FinalCodeApproval --> MergePRStaging["Merge PR to Staging"]
        MergePRStaging --> JiraStaging["Status: In Staging"]:::jiraStatus
        
        JiraStaging --> DeployStaging["Deploy to Staging Environment"]:::staging
        
        DeployStaging --> StagingTest["Validation Tests in Staging"]:::staging
        StagingTest --> StagingOK{Staging<br>Validation<br>OK?}
        StagingOK -->|No| JiraFailedTest["Status: Failed Staging Tests"]:::jiraStatus
        
        JiraFailedTest --> FixStaging["Fix Issues"]:::staging
        StagingOK -->|Yes| JiraStagingPassed["Status: 
        Ready for Production"]:::jiraStatus
        
        JiraStagingPassed --> CreateGitHubRelease[(Create GitHub Release<br>with Semantic Versioning)]
        CreateGitHubRelease --> CreatePRProd["Create PR for Production"]
        
        CreatePRProd --> RaiseITSM{{Raise Change Request in ITSM Tool}}:::itsm
        
        FixStaging --> PR
        
        %% Production Path via ITSM
        RaiseITSM --> ITSMDetails{{Include:<br>- Change Intent TF Plan<br>- Staging Test Results<br>- Risk Assessment<br>- Jira Ticket Link}}:::itsm
        
        ITSMDetails --> JiraITSM["Add ITSM CR# 
        to Jira Ticket"]:::jiraStatus
        
        JiraITSM --> ChangeApproval{Change<br>Approval<br>Process}
        
        ChangeApproval -->|Rejected| JiraRejected["Status: 
        ITSM Rejected"]:::jiraStatus
        
        JiraRejected --> ReviseChange{{Revise Change}}:::itsm
        ChangeApproval -->|Approved| JiraITSMApproved["Status: 
        ITSM Approved"]:::jiraStatus
        
        JiraITSMApproved --> MergePRProd["Merge PR to Production"]
        
        MergePRProd --> JiraDeploying["Status: 
        Deploying to Production"]:::jiraStatus
        
        JiraDeploying --> ProdEnv["Deploy to Production Environment"]:::production
        
        ReviseChange --> PR
        
        ProdEnv --> ProdValidation["Production Validation"]:::production
        ProdValidation --> ProdOK{Production<br>Validation<br>OK?}
        
        ProdOK -->|No| JiraRollback["Status: 
        Rolling Back"]:::jiraStatus
        
        JiraRollback --> Rollback["Rollback to Last Known Good<br>Production Release Version"]:::production
        ProdOK -->|Yes| JiraComplete["Status: 
        Done"]:::jiraStatus
        
        JiraComplete --> UpdateRelease[(Update GitHub Release<br>to Deployed to Production)]:::production
        UpdateRelease --> Complete["Change Complete"]:::production
        
        Rollback --> LearnFromFailure{{Document Learnings<br>in Jira & ITSM}}:::itsm
        LearnFromFailure --> ReviseChange
        
        Complete --> Completion([Process Complete]):::startEnd
        
    end
    
    %% Apply classes
    class DevStart,PR,Completion startEnd
    class OwnerCheck,InternalGradeCheck,ExternalGradeCheck,FeedbackLoop,SandboxValidation,StagingOK,ChangeApproval,ProdOK question
    class MergePRStaging,CreateGitHubRelease,CreatePRProd,MergePRProd process
    
    %% Jira nodes
    class JiraCreate,JiraLinkPR jiraTicket
    class JiraRefine,JiraInProgress,JiraBranch,JiraReview,JiraReviewComment,JiraFeedback,JiraUpdated,JiraApproved,JiraStaging,JiraFailedTest,JiraStagingPassed,JiraITSM,JiraRejected,JiraITSMApproved,JiraDeploying,JiraRollback,JiraComplete jiraStatus
    
    %% Branch naming conventions
    class b1,b2,b3,b4,b5,b6 branchNaming
    class j1,j2,j3,j4,j5,j6 jiraStatus